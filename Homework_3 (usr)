//Universal Shift Register
module usr(data_out, msb_out, lsb_out, data_in, 
	   msb_in, lsb_in, s1, s0, clk, rst);

output data_out;
output msb_out, lsb_out;
input  [3:0] data_in;
input  msb_in, lsb_in;
input  s1, s0, clk ,rst;
reg    [3:0] data_out;

	assign msb_out = data_out[3];
	assign lsb_out = data_out[0];

	always @(posedge clk)begin
	if(rst == 1'b1) data_out <= 0;
	else case({s1, s0})
		0: data_out <= data_out;
		1: data_out <= {msb_in, data_out[3:1]};
		2: data_out <= {data_out[2:0], lsb_in};
		3: data_out <= data_in;
	endcase
	end
endmodule	
